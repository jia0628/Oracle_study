< Join (조인) >
- 두 개 이상의 테이블을 연결하여 하나의 결과를 만들어내는 것


< Join의 종류 >
1. Equi(이퀴) Join, 동등 조인


< Equi Join의 종류 >
1. Equi Join(이퀴 조인, 동등 조인) ★
- 모든 RDBMS에서 사용하는 가장 일반적인 방법
- 단점1 : where절에서 조인 조건을 작성하여 일반 조건과 혼돈을 줌.
- 단점2 : 공통 컬럼에 반드시 알리아스.컬럼라고 명시해야함. (e.컬럼과 d.컬럼 이름은 서로 달라도 된다)
select eno, ename, e.dno, dname
from employee e, department d
where e.dno = d.dno  // 조인 조건
and eno = 7788;        // 일반 조건


2. Natural Join
- 오라클에서만 사용 가능
- 장점1 : from절에 natural join을 명시함. (where절에 따로 조인을 쓰지 않음)
- 장점2 : 공통 컬럼에서 알리아스 또는 테이블명을 생략함.
- 단점1 : 어떤 컬럼을 기준으로 조인을 하는지 알 수 없음.
- 단점2 :  공통 컬럼의 이름이 같을 때만 사용 가능. (공통 컬럼의 이름이 다르면 사용 불가)
select eno, ename, dno, dname
from employee natural join department
where eno = 7788;


3. Join ~ Using
- 오라클에서만 사용 가능
- 장점1 : from절에 join을 명시함. (where절에 따로 조인을 쓰지 않음)
- 장점2 : 공통 컬럼에서 알리아스 또는 테이블명을 생략함.
- 장점3 : using절에 조인하는 컬럼명을 명시함.
- 단점1 : 공통 컬럼의 이름이 같을 때만 사용 가능. (공통 컬럼의 이름이 다르면 사용 불가)
select eno, ename, dno, dname
from employee join department
using(dno)
where eno = 7788;


4. Inner Join ~ On (이너조인, 조인온, 내부조인)
- 모든 RDBMS에서 사용 가능
- inner 키워드 생략 가능
- 장점1 : from절에 inner join을 명시함. (where절에 따로 조인을 쓰지 않음)
- 장점2 : on절에 조인하는 컬럼명을 명시함.
- 장점3 : 조인하는 컬럼명이 다를 때도 사용 가능.
- 단점1 : 공통 컬럼에서 알리아스 또는 테이블명을 생략함.
select eno, ename, e.dno, dname
from employee e (inner) join department d
on e.dno = d.dno
where eno = 7788;

-----------
< Cross Join >
- Catesian Product(카티시안 프로덕트, 카타시안 곱)
- where 절에 조인 조건을 작성하지 않은 경우.
- 두 개의 테이블에 대해서 모든 경우의 수를 나타냄. (열은 덧셈, 행은 곱셈)
- 조인으로서 특별한 의미를 가지지는 않음.
select * from employe, department

##############################################################################

< Join의 종류 >
2. Non-Equi Join
- equi(=)로 조인 조건을 만드는 것이 아닌 조인


3. Self Join (셀프 조인, 자체 조인) ★
- 1개의 테이블을 2개의 테이블이라고 생각하고 조인을 하는 방법


4. Outer Join(아우터 조인, 외부 조인)
- Equi Join에서는 두 테이블 중의 컬럼에서 하나라도 널이 있다면 결과를 출력하지 않음
- null인 컬럼의 값도 결과로 나타내고자 할 때 사용한느 조인
- left outer join : 왼쪽 컬럼에 대해서 오른쪽 컬럼의 값이 널인 경우에 사용
- right outer join : 오른쪽 컬럼에 대해서 왼쪽 컬럼의 값이 널인 경우에 사용

##########################################################################
< 서브 쿼리(Sub Query) >
- 메인 쿼리문 안에 서브 쿼리문이 들어가 있는 형태의 쿼리문
- 메인 쿼리문 -> 바깥쪽을 감싸고 있는 쿼리
- 서브 쿼리문 -> 안쪽에 들어가 있는 쿼리


< 서브쿼리문의 종류 >
1. 단일행 서브쿼리 : 서브쿼리의 결과가 1개인 서브쿼리
- 연산자 : =, >, >=, <, <=

2. 다중행 서브쿼리 : 서브쿼리의 결과가 2개 이상인 서브쿼리
- 연산자 : in(같음), > any, < any, > all, < all
- any : 서브쿼리문의 여러 결과 중에서 하나만 만족해도 출력함.
- all : 서브쿼리문의 모든 결과를 만족할 때 출력함.
- any와 all중에서 모든(전체)라고 하지 않을 때는 대부분 any를 사용함.
- any(some) : 대개는 any를 사용함.


[ 서브쿼리문을 해결할 때의 4가지 단계 ]
1. 문제가 서브쿼리를 사용해야하는지의 판단. (조인 or 서브쿼리)
2. 메인쿼리 안의 서브쿼리를 생성
3. 서브쿼리가 단일행인지 다중행 서브쿼리문인지를 판단
4. 다중행 서브쿼리일때는 any와 all 중에서 어떤 것을 사용할지를 판단

