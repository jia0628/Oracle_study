< select 문 >
- select, from : 필수
- where, group by, having, order by : 선택
- having절은 group by절을 사용했을 때 사용 가능.
- 생략은 가능하지만 순서는 반드시 지켜서 사용해야 함.

select 필드명, 필드명 ...
from 테이블명, 테이블명 ...
where 조건식
group by 그룹할 필드명
having 그룹에 대한 조건식
order by 정렬할 필드와 오름차순/내림차순



< SQLPLUS 명령 > - Oracle에서만 사용되는 전용 명령
- show user; // 접속한 사용자를 확인
- @xxx.sql // xxx.sql 파일 안에 모든 명령을 실행
- set linesize 110; // 한 라인에 글자수를 110으로 설정, 기본값: 80
- set pagesize 20; // 한 페이지에 라인수를 20으로 설정, 기본값: 14
--> 위의 set 2개 값은 접속을 해제하면 기본값으로 돌아감. (매번 설정해야함)
- show linesize; // 설정된 라인의 글자수를 확인
- show pagesize; // 설정된 페이지의 라인수를 확인



(★)
- host : dbms에서 작업을 하다가 잠깐 os로 나가서 작업할 때 사용하는 명령, dbms의 설정 상태를 유지하고 있음.
- exit (host) : 명령으로 os로 나가 있을 때, 다시 dbms로 돌아가는 명령.



[ spool 명령 정리 ]
- 시작: spool 경로\파일명
- 끝: spool off
- .LST 확장자로 저장


- ed (edit) : 버퍼에 저장된 직전 명령문을 메모장으로 보여줌.
--- 명령문을 수정할 때 사용함, 주의: 버퍼의 내용은 ;(세미콜론)이 아닌 /로 끝나야 함. 
- l (list) : 직전 명령문을 보여줌
- / : 직전 명령문을 실행
- r (run) : 직전 명령문을 보여주고, 실행


[ save 명령 정리 ]
save : 버퍼에 저장된 직전 명령문을 파일로 저장함.
---> save 경로\파일명 (새로 생성할 때)
---> save 경로\파일명 replace (기존에 있던 파일의 내용을 변경, 덮어씌움)
---> save 경로\파일명 append (기존에 있던 파일에 내용을 추가)
---> .sql 확장자로 저장됨.
get : 저장된 sql 파일을 버퍼로 불러와서 명령 화면으로 보여줌
---> 불러와서 ed로 편집해서 사용하면 됨. (원본 sql 파일은 그대로 있음)



set heading off : 출력 결과에서 필드명을 제외함.
set heading on : 출력 결과에서 필드명을 다시 포함함.


[ 출력 포맷 변경 ]
- 기본 형식: column 컬럼명 format 포맷형식;
- 원래 포맷으로 설정: column 컬럼명 clear;


포맷형식
1. 문자열 자릿수 : a자릿수;  ex) a10 -> 문자 10자리
2. 숫자 자릿수:
- 0: 의미 없는 숫자도 0으로 출력
- 9: 의미 없는 숫자는 생략하고 출력하는 방식 (더 많이 씀)
- ,(콤마): 천단위 구분기호
- 화폐기호: $(달러), L(지역화폐)

########################################################################

distinct : 중복되는 데이터를 제거하여 확인 (★)
dual 테이블 : 오라클에서 제공하는 더미 테이블, 다른 테이블의 사용없이 결과를 확인하고자 할 때 사용하는 테이블
sysdate : 날짜를 확인하는 함수

< 오라클의 다양한 함수 >
[ 문자열 함수 ]
1. 대소문자 변환 함수
- upper( ): 대문자로 변환
- lower( ): 소문자로 변환
- initcap( ): 단어의 첫글자만 대문자로, 나머지 글자는 소문자


2. 문자열의 길이
- 영어는 length(), lengthb()가 같음.
- 한글은 length(), lengthb()가 다르다, 한글은 3Byte로 취급
ex) length('오라클'): 3,  lengthb('오라클'): 9
- length( ): 문자의 길이
- lengthb( ): 문자에 대한 바이트의 크기


3. 문자열의 조작 함수
- concat(문자열1, 문자열2) : 2개의 문자열을 연결
- substr(문자열, 위치, 개수) : 문자열에서 위치에 해당하는 문자를 개수만큼 추출
- substrb(문자열, 위치, 바이트수) : 문자열에서 위치에 해당하는 문자를 바이트수만큼 추출
--> 문자열의 시작번호 1번부터 시작함.
--> 문자열의 끝에서부터 -1부터 거꾸로 지정할 수 있음.

- instr(문자열, 특정문자) : 문자열에서 특정문자를 맨 앞에서부터 첫번째로 발견하는 위치값을 반환.
- instr(문자열, 특정문자, 찾을위치) : 문자열에서 특정문자를 찾을 위치부터 첫번째로 발견하는 위치값을 반환.
- instr(문자열, 특정문자, 찾을위치, 몇번째발견) : 문자열에서 특정문자를 찾을위치부터 몇번째로 발견하는 위치값을 반환.
- instrb(문자열, 특정문자, 찾을 바이트 위치, 몇번째발견) : 문자열에서 특정문자를 찾을 바이트 위치부터 몇번째로 발견하는 위치값을 반환.

- lpad(문자열, 전체길이, 채울문자) : 문자열을 전체길이로 나타내고, 남는 왼쪽 공간을 채울문자로 채움.
- rpad(문자열, 전체길이, 채울문자) : 문자열을 전체길이로 나타내고, 남는 오른쪽 공간을 채울문자로 채움.

- ltrim(문자열) : 문자열에서 왼쪽 빈공간을 없앰.
- rtrim(문자열) : 문자열에서 오른쪽 빈공간을 없앰.
- trim(문자열) : 문자열에서 왼쪽, 오른쪽 빈공간을 없앰.

########################################################################

< 오라클의 다양한 함수 >
[ 숫자 함수 ]
1. round( ) : 반올림 함수
round(숫자) : 1의 자리로 반올림
round(숫자, 0) : 1의 자리로 반올림
round(숫자, 1) : 소숫점 첫번째 자리로 반올림 
round(숫자, 2) : 소숫점 둘째 자리로 반올림 
round(숫자, 3) : 소숫점 셋째 자리로 반올림
round(숫자, -1) : 10의 자리로 반올림(1의 자리에서 반올림한다)

2. trunc( ): 버림 함수
trunc(숫자) : 소숫점 첫째 자리에서 버림 
trunc(숫자, 0) : 소숫점 첫째 자리에서 버림
trunc(숫자, 1) : 소숫점 둘째 자리에서 버림 
trunc(숫자, 2) : 소숫점 셋째 자리에서 버림 
trunc(숫자, 3) : 소숫점 넷째 자리에서 버림 
trunc(숫자, -1) : 1의 자리에서 버림

3. mod( ): 나머지 함수
mod(나뉨수, 나눔수) : 나뉨수를 나눔수로 나누었을 때 나머지
ex) mod(10, 3) -> 1


########################################################################

< 오라클의 다양한 함수 >
[ 날짜 함수 ]
1. sysdate : 현재 시스템의 날짜를 구하는 함수 ... 같은걸로 now( ) -> MySQL
2. months_between(날짜1, 날짜2) : 날짜1에서 날짜2를 뺀 월수 
3. add_months(날짜, 개월수) : 날짜에서 개월수를 더한 날짜
4. next_day(날짜, 요일) : 날짜를 기준으로 다가오는 최초의 요일에 해당하는 날짜
-- next_day(sysdate, '수요일') : 현재 날짜로부터 다가오는 수요일의 날짜
-- next_day(sysdate, '수') :  현재 날짜로부터 다가오는 수요일의 날짜
-- next_day(sysdate, 4) : 현재 날짜로부터 다가오는 수요일의 날짜
-- 1: 일, 2: 월, 3: 화, 4: 수, 5: 목, 6: 금, 7: 토
5. last_day(날짜) : 날짜의 월의 마지막 날짜


[ 날짜 계산 ]
1. 날짜 + 숫자 : 날짜에 일수를 더해서 계산
2. 날짜 - 숫자 : 날짜에 일수를 빼서 계산
3. 날짜 - 날짜 : 날짜 사이의 일수
주의) 날짜 + 날짜 : 의미가 없는 계산이므로 에러
4. 날짜 + 숫자/24 : 날짜에 시간을 더해서 계산
5. 날짜 - 숫자/24 : 날짜에 시간을 빼서 계산
6. 날짜에 대해서 round( ), trunc( ) 함수가 적용됨.

##########################################################################

알리아스(alias) : 필드명에 대한 별칭(별명)
1. 필드명 as "알리아스" -> as는 생략 가능
2. 필드명 "알리아스"


< 오라클의 다양한 함수 >
[ 형 병환 함수 ]
1. to_char( ) : 날짜나 숫자를 문자열로 변환하는 함수
- to_char(날짜, 날짜포맷) 

# 날짜 포맷 #
yyyy: 년도 4자리, yy: 년도 2자리
mm: 월 2자리, mon: 월을 알파벳, 우리나라에서는 11월
dd: 일 2자리
day: 요일(ex, 월요일), dy: 요일 약자(ex, 월)

# 시간 포맷 #
hh: 12시간, hh24: 24시간
mi: 분 2자리
ss: 초 2자리
am(pm): 오전 또는 오후

- to_char(숫자, 숫자포맷)
# 숫자 포맷 #
0: 의미 없는 자리도 0으로 채움
9: 의미 없는 자리는 생략함
$: 달러표시
L: 지역 화폐
,(콤마) : 천단위 구분 기호
.(점) : 소수점 표시

2. to_date( ) : 문자열 데이터를 날짜형으로 변환하는 함수
# 허용하는 날짜 형식: 문자열 형태는 허용, '1981/02/20', '81/02/20', '1981-02-20', '81-02-20', '19810220', '810220'
# 허용하지 않는 날짜 형식: 숫자 형태는 불가, 19810220, 810220
-> 숫자 형태일 때는 to_daye(19810220), to_date(810220)

3. to_number( ) : 문자열을 숫자형으로 변환하는 함수
- to_number(문자열, 포맷형식)
# 오라클에서는 '1000' + '500' -> 1500 / '1000' - '500' -> 500 문자열의 계산을 허용
# '1,000' + '1,500'은 허용하지 않음
-> to_number('1,000', '9,999') + to_number('1,500', '9,999') -> 2500


############################################################################

[ null값 처리 함수 ] (★)
- null value
- nvl(필드명, null 대체값) : 필드에 해당하는 값이 null이 아닐때는 그 값을 사용하고, null일때는 대체값을 사용하는 함수
- nvl2(필드명, null이 아닐때 대체값1, null일 때 대체값2) : 필드명에 해당하는 값이 null이 아닐때 대체값1을, null일때 대체값2를 사용하는 함수
- nullif(표현식1, 표현식2) : 표현식1과 표현식2가 같을 때 null을 반환하고, 다를 때는 표현식1을 반환하는 함수
- coalesce(표현식1, 표현식2, 표현식3 ...) : nvl2 함수를 확장하여 여러개의 표현식이 null일때 사용이 가능한 함수
-- 표현식 1이 null이 아니면 표현식 1을 사용하고, null이면 표현식2로 이동
-- 표현식 2가 null이 아니면 표현식 2을 사용하고, null이면 표현식3으로 이동
-- 해당 표현식이 null이 아닐때까지 계속 다음으로 실행을 이동하는 함수


